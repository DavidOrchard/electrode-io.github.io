---
title:  "What are Archetypes?"
permalink: docs/what_are_archetypes.html
toplevel: "Getting Started: Quick Guide"
---

> Archetypes are live, encapsulated, boilerplates, for centralizing your project configurations and dependencies.

Archetypes provide something that is quite far off from what a frameworks and app generators provide. An archetype is like an npm module template, but not one that is used to generate code files and then discarded, but more like a live “superclass” of a module; think inheritance but for npm modules.

Let’s say that you are developing many different modules that all require you to have very similar scripts and very similar dependencies, you can use the same archetype for all of them. With a generator like Yeoman, you would run the generator once, and it would output your module’s boilerplate and all is fine. However, if you ever wanted to change dependencies, and have that change propagate through to each and every module, you would have to manually go through each module and update those dependencies by hand.

> Archetypes help to solve the problem of updating module boilerplates, by providing a single source of truth, that all of your modules inherit from.

If after developing hundreds of modules ( say, React components ), you decide to change your build script, and that build script requires a new dependency, you can change it once in the archetype. Once all of the other modules run `npm install`, they will get the updated build scripts as well as the updated dependencies. 

Electrode archetypes are a way for every electrode module to share common scripts, dependencies and best practices that can be updated in real time. That update will then propagate to every module that inherits from that specific archetype.

### Electrode Archetypes

#### Electrode React Universal App

The React universal app archetype provides for common patterns across all app projects so that each app project can standardize on common development behavior and patterns. Its essentially pre-made patterns for build scripts.

You can find a full list of the gulp tasks that are provided for your projects by this archetype [here.](https://github.com/electrode-io/electrode-archetype-react-app/blob/master/arch-gulpfile.js#L107-L243)

Let's dive a little deeper into the `gulp build` task that this specific archetype provides for a universal React application.

#### gulp build
Running `gulp build` will run through a few other gulp tasks to help you build your application for a production environment generating a minified bundle ready to use.
The following tasks will be run in order:

-`clean-dist`: 
    Delete the old `dist/` folder

-`build-dist-min`: 
    Run webpack.config.js This particular production webpack config will be merged with the base config that is located [here.](https://github.com/electrode-io/electrode-archetype-react-app/blob/master/config/webpack/base.js)
    Each of the archetypes webpack configs use lodash's [flow](https://lodash.com/docs/4.16.4#flow) and [webpack-partial](https://github.com/webpack-config/webpack-partial) to compose together functions that merge partial webpack configs 
    together with the base config allowing for a modular configuration file. 
    

```javascript
// the production webpack config
// _.flow is used to compose functions
module.exports = _.flow(
  // use webpack-partial binding it to a the baseConfig  
  mergeWebpackConfig.bind(null, {}, baseConfig),
  // optimize.js
  optimizeConfig(),
  // locals.js 
  localesConfig(),
  // define.js
  defineConfig(),
  // sourcemaps-remote.js
  productionSourcemapsConfig()
)();
```


The production webpack config is merged together with the base config and the following partials:

   - [optimize.js](https://github.com/electrode-io/electrode-archetype-react-app/blob/master/config/webpack/partial/optimize.js): Apply webpack's dedupe plugin to deduplicate similar or equal files from the output bundle in addition to Uglifying the output using the UglifyJS plugin
    
   - [locals.js](https://github.com/electrode-io/electrode-archetype-react-app/blob/master/config/webpack/partial/locales.js): Handle possible dynamic requires within moment.js, so webpack does not include all of the language files
    
   - [define.js](https://github.com/electrode-io/electrode-archetype-react-app/blob/master/config/webpack/partial/define.js): Define a production environment for webpack so it can remove non production code.
    
   - [sourcemaps-remote.js](https://github.com/electrode-io/electrode-archetype-react-app/blob/master/config/webpack/partial/sourcemaps-remote.js): Create sourcemaps.

-`build-dist:flatten-l10n`:
    Run a script to extract localized messages from a file located in a temporary folder generated by the build and write them to a json file in the dist folder. This script is located [here.](https://github.com/electrode-io/electrode-archetype-react-app/blob/master/scripts/l10n/flatten-messages.js)

-`generate-service-worker`:
    Electrode's React application archetype has built in support for [service workers](https://developers.google.com/web/fundamentals/getting-started/primers/service-workers). This gulp task will take a service worker precache configuration file (if it exists, electrode does not provide it by default) and generate a new service worker file for caching of static assets with service workers. 

-`build-dist:clean-tmp`:
    Delete the .tmp folder generated by the build. 

#### Electrode React Component

An Electrode flavored React component archetype.

You can find a full list of all of the gulp tasks this archetype provides [here.](https://github.com/electrode-io/electrode-archetype-react-component/blob/master/archetype-gulpfile.js#L38-L134)

